// This is a test file for starting the server from its source directory.
// This file will never get installed.

general: {
  // permit_root_startup:
  //   true           = the program may start as root (DISCOURAGED)
  //   null or false  = the program cannot start as root
  permit_root_startup: true

  // pid_file_path:
  //   [path]      = write PID to this file after startup
  //   null        = don't write PID anywhere
  pid_file_path: "../../var/poseidon/poseidon.pid"
}

logger: {
  // Six levels are defined here, each of which is assigned a hard-coded
  // name. They correspond to `POSEIDON_LOG_*` macros.
  fatal: {
    // color:
    //   [string]    = color text with this ANSI escape code
    //   null or ""  = don't color at all
    color: "35;1"  // bright magenta

    // stdio:
    //   "stdout"    = write text to standard output
    //   "stderr"    = write text to standard error
    //   null or ""  = don't write to standard stream
    stdio: "stderr"

    // file:
    //   [path]      = write text to this file
    //   null or ""  = don't write to any file
    file: "../../var/poseidon/server.err"

    // trivial:
    //   true           = discard messages in case of congestion
    //   null or false  = ensure all messages will be delivered
    trivial: false
  }

  // See comments in the beginning of this block for details.
  error: {
    color: "31;1"  // bright red
    stdio: "stderr"
    file: "../../var/poseidon/server.err"
  }

  // See comments in the beginning of this block for details.
  warn: {
    color: "33"  // yellow
    stdio: "stdout"
    file: "../../var/poseidon/server.err"
  }

  // See comments in the beginning of this block for details.
  info: {
    color: "32"  // green
    stdio: "stdout"
    file: "../../var/poseidon/server.log"
  }

  // See comments in the beginning of this block for details.
  debug: {
    color: "36"  // cyan
    stdio: "stdout"
    file: "../../var/poseidon/server.log"
  }

  // See comments in the beginning of this block for details.
  trace: {
    color: "34;1"  // bright blue
    stdio: null
    trivial: true
  }
}

network: {
  // These are settings for the network driver.
  poll: {
    // event_buffer_size:
    //   [count]  = number of I/O events for each single poll
    //   null     = default value: 1 KiB
    event_buffer_size: 1024

    // throttle_size:
    //   [bytes]  = suspend reading if write queue exceeds this size
    //   null     = default value: 1 MiB
    throttle_size: 1048576
  }

  // These are settings for SSL/TLS connections.
  ssl: {
    // default_certificate:
    //   [path]  = default certificate file for servers
    //   null    = no default certificate
    default_certificate: "ssl/test.crt"

    // default_private_key:
    //   [path]  = default private key file for servers
    //   null    = no default private key
    default_private_key: "ssl/test.key"

    // trusted_ca_path:
    //   [path]  = directory of trusted CA certificates for clients
    //   null    = no validation (DANGEROUS for production use)
    trusted_ca_path: "/etc/ssl/certs"
  }

  // These are settings for HTTP connections.
  http: {
    // max_request_content_length:
    //   [bytes]  = maximum number of bytes that the body of a request
    //              message from a client is allowed to contain (used by the
    //              default implementation of `HTTP_Server_Session::
    //              do_on_http_request_body_stream()`)
    //   null     = default value: 3 MiB
    max_request_content_length: 3145728

    // max_response_content_length:
    //   [bytes]  = maximum number of bytes that the body of a response
    //              message from another server may contain (used by the
    //              default implementation of `HTTP_Client_Session::
    //              do_on_http_response_body_stream()`)
    //   null     = default value: 1 MiB
    max_response_content_length: 1048576

    // keep_alive_timeout:
    //   [secs]   = shut persistent connections down after this timeout
    //   null     = default value: 30
    keep_alive_timeout: 30

    // max_websocket_frame_length:
    //   [bytes]  = maximum number of bytes that the payload of an incoming
    //              data frame is allowed to contain (used by the default
    //              implementations of `WebSocket_Server_Session::
    //              do_on_websocket_stream()` and
    //              `WebSocket_Client_Session::do_on_websocket_stream()`)
    //   null     = default value: 1 MiB
    max_websocket_frame_length: 1048576
  }
}

fiber: {
  // stack_vm_size:
  //   [bytes]  = stack size for each fiber, including 2 guard pages (must
  //              be a multiple of 65536)
  //   null     = use system thread stack size
  stack_vm_size: null

  // warn_timeout:
  //   [secs]   = print a warning if suspension exceeds this duration
  //   null     = default value: 15 seconds
  warn_timeout: 15

  // fail_timeout
  //   [secs]   = resume execution if suspension exceeds this duration
  //   null     = default value: 300 seconds
  fail_timeout: 300
}

addons: [
  // This is the list of addons (shared libraries) to load. Addons are
  // loaded in this precise order. If a string is not a path, but a file
  // name, conventional library search rules apply. Addons cannot be
  // unloaded.
//  "poseidon-example_timer.so"
//  "poseidon-example_udp_echo_server.so"
//  "poseidon-example_tcp_echo_server.so"
//  "poseidon-example_ssl_echo_server.so"
  "poseidon-example_http_server.so"
//  "poseidon-example_http_client.so"
  "poseidon-example_https_server.so"
//  "poseidon-example_https_client.so"
]
